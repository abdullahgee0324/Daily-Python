# ================================
# DEMO: PYTHON LIST METHODS
# ================================
print("=== LIST METHODS ===")

# append
nums = [1, 2, 3]
nums.append(4)
print("append:", nums)

# clear
nums = [1, 2, 3]
nums.clear()
print("clear:", nums)

# copy
nums = [1, 2, 3]
copy_list = nums.copy()
print("copy:", copy_list)

# count
nums = [1, 2, 2, 3]
print("count:", nums.count(2))

# extend
nums = [1, 2]
nums.extend([3, 4])
print("extend:", nums)

# index
nums = [10, 20, 30, 20]
print("index:", nums.index(20))

# insert
nums = [1, 3, 4]
nums.insert(1, 2)
print("insert:", nums)

# pop
nums = [1, 2, 3]
print("pop last:", nums.pop(), "-> remaining:", nums)
nums = [1, 2, 3]
print("pop index 0:", nums.pop(0), "-> remaining:", nums)

# remove
nums = [1, 2, 3, 2]
nums.remove(2)
print("remove:", nums)

# reverse
nums = [1, 2, 3]
nums.reverse()
print("reverse:", nums)

# sort
nums = [3, 1, 2]
nums.sort()
print("sort:", nums)
nums.sort(reverse=True)
print("sort reverse:", nums)


# ================================
# STRING METHODS
# ================================
print("\n=== STRING METHODS ===")

# capitalize
s = "python"
print("capitalize:", s.capitalize())

# casefold
s = "Straße"
print("casefold:", s.casefold())

# center
s = "cat"
print("center:", s.center(7, "-"))

# count
s = "banana"
print("count:", s.count("na"))

# encode
s = "hello"
print("encode:", s.encode("utf-8"))

# endswith
s = "python"
print("endswith:", s.endswith("on"))

# expandtabs
s = "1\t2\t3"
print("expandtabs:", s.expandtabs(4))

# find
s = "banana"
print("find:", s.find("na"))

# format
print("format:", "{} + {} = {}".format(2, 3, 5))

# format_map
mapping = {"x": 1, "y": 2}
print("format_map:", "{x}, {y}".format_map(mapping))

# index
s = "banana"
print("index:", s.index("na"))

# isalnum
s = "abc123"
print("isalnum:", s.isalnum())

# isalpha
s = "abc"
print("isalpha:", s.isalpha())

# isascii
s = "hello"
print("isascii:", s.isascii())

# isdecimal
s = "123"
print("isdecimal:", s.isdecimal())

# isdigit
s = "²3"
print("isdigit:", s.isdigit())

# isidentifier
s = "var_1"
print("isidentifier:", s.isidentifier())

# islower
s = "hello"
print("islower:", s.islower())

# isnumeric
s = "Ⅳ"
print("isnumeric:", s.isnumeric())

# isprintable
s = "hello!"
print("isprintable:", s.isprintable())

# isspace
s = "   "
print("isspace:", s.isspace())

# istitle
s = "Hello World"
print("istitle:", s.istitle())

# isupper
s = "HELLO"
print("isupper:", s.isupper())

# join
items = ["a", "b", "c"]
print("join:", ",".join(items))

# ljust
s = "cat"
print("ljust:", s.ljust(6, "."))

# lower
s = "HELLO"
print("lower:", s.lower())

# lstrip
s = "   hi"
print("lstrip:", s.lstrip())

# maketrans + translate
table = str.maketrans({"a": "1", "b": "2"})
s = "abc"
print("translate:", s.translate(table))

# partition
s = "apple|pear"
print("partition:", s.partition("|"))

# removeprefix
s = "unhappy"
print("removeprefix:", s.removeprefix("un"))

# removesuffix
s = "friendly"
print("removesuffix:", s.removesuffix("ly"))

# replace
s = "banana"
print("replace:", s.replace("na", "NO"))

# rfind
s = "banana"
print("rfind:", s.rfind("na"))

# rindex
s = "banana"
print("rindex:", s.rindex("na"))

# rjust
s = "cat"
print("rjust:", s.rjust(6, "."))

# rpartition
s = "apple|pear|orange"
print("rpartition:", s.rpartition("|"))

# rsplit
s = "1,2,3,4"
print("rsplit:", s.rsplit(",", 1))

# rstrip
s = "hello!!!"
print("rstrip:", s.rstrip("!"))

# split
s = "1,2,3"
print("split:", s.split(","))

# splitlines
s = "line1\nline2"
print("splitlines:", s.splitlines())

# startswith
s = "python"
print("startswith:", s.startswith("py"))

# strip
s = "---hi---"
print("strip:", s.strip("-"))

# swapcase
s = "HeLLo"
print("swapcase:", s.swapcase())

# title
s = "hello world"
print("title:", s.title())

# upper
s = "hello"
print("upper:", s.upper())

# zfill
s = "7"
print("zfill:", s.zfill(3))

# ================================
